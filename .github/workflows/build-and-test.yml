name: Build and Test Python Package

on:
  push:
    branches: [develop, feature/*]
  pull_request:
    branches: [develop]
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version to set'
        required: true

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set version
        if: github.ref == 'refs/heads/develop'
        id: set_version
        run: |
          PACKAGE_NAME="avatar-creator-core"
          LATEST_VERSION=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json | python3 -c "import sys, json; print(json.load(sys.stdin)['info'].get('version', ''))" || true)
          if [ -z "$LATEST_VERSION" ] || [[ "$LATEST_VERSION" == *"ModuleNotFoundError"* ]]; then
            VERSION="1.0.0"
          else
            VERSION=$LATEST_VERSION
          fi
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          VERSION="${MAJOR}.${MINOR}.${PATCH}"

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Package version: $VERSION"

      - name: Set beta version
        if: startsWith(github.ref_name, 'feature/')
        id: set_beta_version
        run: |
          PACKAGE_NAME="avatar-creator-core"
          NEXT_BETA=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json | python3 -c "
          import sys, json, re
          json_data = json.load(sys.stdin)
          releases = json_data['releases']
          info = json_data['info']

          latest_version = info.get('version')
          if not latest_version:
              latest_version = '1.0.0'
          major, minor, patch = latest_version.split('.')
          patch = int(patch) + 1
          next_version = f'{major}.{minor}.{patch}'

          beta_versions = [v for v in releases.keys() if 'beta' in v]
          if beta_versions:
              nums = [int(re.search(r'beta-?(\d+)', v).group(1)) for v in beta_versions if re.search(r'beta-?(\d+)', v)]
              latest_beta = max(nums)
              print(f'{next_version}-beta.{latest_beta + 1}')
          else:
              print(f'{next_version}-beta.1')
          ")

          echo "VERSION=$NEXT_BETA" >> $GITHUB_ENV
          echo "Package version: $NEXT_BETA"

      - name: Update version in setup.cfg
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.package_version }}"
          fi
          sed -i "s/^version = .*/version = $VERSION/" setup.cfg

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Install test dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Install package in editable mode
        run: |
          pip install -e .

      - name: Run tests with coverage (HTML report)
        run: |
          pytest --cov --cov-branch --cov-report=xml --cov-report=html

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov/
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Build package
        run: |
          python -m build

      - name: Upload built package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/